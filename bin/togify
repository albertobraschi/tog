#!/usr/bin/env ruby

require 'optparse'
require 'ftools'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

check_params(ARGV)
files = {
  "lib/tasks/platform.rake.tpl" => "lib/tasks/platform.rake"
}

create_files(files)
add_desert
puts "[done] togified!"



def check_params(params)
  if params.empty?
    abort "Please specify the directory to togify, e.g. `#{File.basename($0)} .'"
  elsif !File.exists?(params.first)
    abort "`#{params.first}' does not exist."
  elsif !File.directory?(params.first)
    abort "`#{params.first}' is not a directory."
  elsif params.length > 1
    abort "Too many arguments; please specify only the directory to togify."
  end
end
def create_files(files)
  templates_dir = File.join(File.dirname(__FILE__), '/../templates')
  base = ARGV.shift
  files.each do |template, file|
    file = File.join(base, file)
    if File.exists?(file)
      warn "[skip] `#{file}' already exists"
    elsif File.exists?(file.downcase)
      warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
    elsif !File.exists?(File.dirname(file))
      warn "[skip] directory `#{File.dirname(file)}' does not exist"
    else
      puts "[add] writing `#{file}'"
      File.copy(File.join(templates_dir, template), file)
    end
  end
end
def add_desert(*resources)
  sentinel = 'ActionController::Routing::Routes.draw do |map|'
  puts "[add] require 'desert' to environment.rb"
  gsub_file 'config/routes.rb', /(#{Regexp.escape(sentinel)})/mi do |match|
    "#{match}\n  require 'desert' \n"
  end
end